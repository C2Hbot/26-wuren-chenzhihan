// Generated by gencpp from file demo_turtle2/turtle.msg
// DO NOT EDIT!


#ifndef DEMO_TURTLE2_MESSAGE_TURTLE_H
#define DEMO_TURTLE2_MESSAGE_TURTLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace demo_turtle2
{
template <class ContainerAllocator>
struct turtle_
{
  typedef turtle_<ContainerAllocator> Type;

  turtle_()
    : linear_vx(0.0)
    , linear_vy(0.0)
    , linear_vz(0.0)  {
    }
  turtle_(const ContainerAllocator& _alloc)
    : linear_vx(0.0)
    , linear_vy(0.0)
    , linear_vz(0.0)  {
  (void)_alloc;
    }



   typedef float _linear_vx_type;
  _linear_vx_type linear_vx;

   typedef float _linear_vy_type;
  _linear_vy_type linear_vy;

   typedef float _linear_vz_type;
  _linear_vz_type linear_vz;





  typedef boost::shared_ptr< ::demo_turtle2::turtle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::demo_turtle2::turtle_<ContainerAllocator> const> ConstPtr;

}; // struct turtle_

typedef ::demo_turtle2::turtle_<std::allocator<void> > turtle;

typedef boost::shared_ptr< ::demo_turtle2::turtle > turtlePtr;
typedef boost::shared_ptr< ::demo_turtle2::turtle const> turtleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::demo_turtle2::turtle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::demo_turtle2::turtle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::demo_turtle2::turtle_<ContainerAllocator1> & lhs, const ::demo_turtle2::turtle_<ContainerAllocator2> & rhs)
{
  return lhs.linear_vx == rhs.linear_vx &&
    lhs.linear_vy == rhs.linear_vy &&
    lhs.linear_vz == rhs.linear_vz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::demo_turtle2::turtle_<ContainerAllocator1> & lhs, const ::demo_turtle2::turtle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace demo_turtle2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::demo_turtle2::turtle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::demo_turtle2::turtle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::demo_turtle2::turtle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::demo_turtle2::turtle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo_turtle2::turtle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo_turtle2::turtle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::demo_turtle2::turtle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5bcb1a3b1dca3c9e55294fb33328a77b";
  }

  static const char* value(const ::demo_turtle2::turtle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5bcb1a3b1dca3c9eULL;
  static const uint64_t static_value2 = 0x55294fb33328a77bULL;
};

template<class ContainerAllocator>
struct DataType< ::demo_turtle2::turtle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "demo_turtle2/turtle";
  }

  static const char* value(const ::demo_turtle2::turtle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::demo_turtle2::turtle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 linear_vx\n"
"float32 linear_vy\n"
"float32 linear_vz\n"
;
  }

  static const char* value(const ::demo_turtle2::turtle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::demo_turtle2::turtle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linear_vx);
      stream.next(m.linear_vy);
      stream.next(m.linear_vz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct turtle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::demo_turtle2::turtle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::demo_turtle2::turtle_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "linear_vx: ";
    Printer<float>::stream(s, indent + "  ", v.linear_vx);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "linear_vy: ";
    Printer<float>::stream(s, indent + "  ", v.linear_vy);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "linear_vz: ";
    Printer<float>::stream(s, indent + "  ", v.linear_vz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEMO_TURTLE2_MESSAGE_TURTLE_H
